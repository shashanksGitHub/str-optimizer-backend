# Use Ubuntu base image for reliable wkhtmltopdf installation
FROM ubuntu:22.04

# Install Python, wkhtmltopdf, and dependencies
ENV DEBIAN_FRONTEND=noninteractive
RUN apt-get update && apt-get install -y \
    python3 \
    python3-pip \
    python3-dev \
    wkhtmltopdf \
    xvfb \
    fonts-liberation \
    fonts-noto-color-emoji \
    fonts-noto-cjk \
    fontconfig \
    && rm -rf /var/lib/apt/lists/*

# Set up Python environment
RUN ln -sf /usr/bin/python3 /usr/bin/python && \
    ln -sf /usr/bin/pip3 /usr/bin/pip

# Set working directory
WORKDIR /workspace

# Copy requirements and install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy application code
COPY . .

# Verify wkhtmltopdf is available and can generate PDFs
RUN python -c "
import os
import sys
import subprocess
import tempfile

print('=== WKHTMLTOPDF VERIFICATION ===')

# Test wkhtmltopdf availability
try:
    result = subprocess.run(['wkhtmltopdf', '--version'], capture_output=True, text=True, timeout=10)
    if result.returncode == 0:
        print(f'‚úÖ wkhtmltopdf found: {result.stdout.strip()}')
    else:
        print('‚ùå wkhtmltopdf not working')
        sys.exit(1)
except Exception as e:
    print(f'‚ùå wkhtmltopdf check failed: {e}')
    sys.exit(1)

# Test PDF generation capability
try:
    # Create test HTML
    test_html = '''
    <html>
    <head>
        <title>Test PDF</title>
        <style>
            body { font-family: Arial, sans-serif; margin: 40px; }
            h1 { color: #2563eb; }
        </style>
    </head>
    <body>
        <h1>wkhtmltopdf Test</h1>
        <p>This is a test PDF generated by wkhtmltopdf in Docker.</p>
    </body>
    </html>
    '''
    
    with tempfile.NamedTemporaryFile(mode='w', suffix='.html', delete=False) as html_file:
        html_file.write(test_html)
        html_path = html_file.name
    
    with tempfile.NamedTemporaryFile(suffix='.pdf', delete=False) as pdf_file:
        pdf_path = pdf_file.name
    
    # Test PDF generation
    cmd = [
        'xvfb-run', '-a', '--server-args=-screen 0 1024x768x24',
        'wkhtmltopdf', 
        '--page-size', 'A4',
        '--margin-top', '0.75in',
        html_path,
        pdf_path
    ]
    
    result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)
    
    if result.returncode == 0 and os.path.exists(pdf_path):
        file_size = os.path.getsize(pdf_path)
        print(f'‚úÖ PDF generation test successful ({file_size:,} bytes)')
        
        # Clean up
        os.unlink(html_path)
        os.unlink(pdf_path)
    else:
        print(f'‚ùå PDF generation test failed: {result.stderr}')
        sys.exit(1)
        
except Exception as e:
    print(f'‚ùå PDF test failed: {e}')
    sys.exit(1)

print('üéâ WKHTMLTOPDF PDF SYSTEM READY!')
"

# Expose port
EXPOSE 8080

# Start command
CMD ["gunicorn", "--bind", "0.0.0.0:8080", "--workers", "1", "--timeout", "120", "wsgi:application"] 